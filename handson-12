class DynamicArray:
  def __init__(self, initial_capacity=4):
    self.size=0
    self.capacity=initial_capacity
    self.data=[None]*self.capacity
  def resize(self, new_capacity):
    new_data=[None]*new_capacity
    for i in range(self.size):
      new_data[i]=self.data[i]
    self.data=new_data
    self.capacity=new_capacity
  def push_back(self, value):
    if self.size==self.capacity:
      self.resize(self.capacity*2)
    self.data[self.size]=value
    self.size+=1
  def pop_back(self):
    if self.size>0:
      self.size-=1
  def get_size(self):
    return self.size
  def get_capacity(self):
    return self.capacity
  def __getitem__(self, index):
    if index>=self.size or index<0:
      raise IndexError("Index out of range")
    return self.data[index]
  def __setitem__(self, index, value):
    if index>=self.size or index<0:
      raise IndexError("Index out of range")
    self.data[index]=value
  def clear(self):
    self.size = 0
  def empty(self):
    return self.size == 0

if __name__ == "__main__":
  try:
    arr=DynamicArray()
    arr.push_back(1)
    arr.push_back(2)
    arr.push_back(3)
    arr.push_back(4)
    print(f"Array size: {arr.get_size()}")
    print(f"Array capacity: {arr.get_capacity()}")
    for i in range(arr.get_size()):
      print(f"Element at index {i}: {arr[i]}")
    arr.push_back(5)
    arr.push_back(6)
    print("\nAfter adding more elements:")
    print(f"Array size: {arr.get_size()}")
    print(f"Array capacity: {arr.get_capacity()}")
    for i in range(arr.get_size()):
      print(f"Element at index {i}: {arr[i]}")
    arr.pop_back()
    print("\nAfter pop_back:")
    print(f"Array size: {arr.get_size()}")
  except Exception as e:
    print(f"Error: {str(e)}")

class DynamicTable:
  def __init__(self):
    self.capacity=1
    self.elements=[None]*self.capacity
    self.num_elements=0
  def insert(self, item):
    if self.num_elements==self.capacity:
      self.resize(self.capacity*2)
    self.elements[self.num_elements]=item
    self.num_elements+=1
  def resize(self, new_capacity):
    new_elements=[None]*new_capacity
    for i in range(self.num_elements):
      new_elements[i]=self.elements[i]
    self.elements=new_elements
    self.capacity=new_capacity
  def aggregate_amortized_runtime(self, n):
    total_cost=0
    for i in range(n):
      if self.num_elements==self.capacity:
        total_cost+=self.capacity
        self.resize(self.capacity*2)
      total_cost+=1
      self.num_elements+=1
    return total_cost/n

dynamic_table=DynamicTable()
n=100
aggregate_amortized=dynamic_table.aggregate_amortized_runtime(n)
print("Amortized runtime using aggregate method:", aggregate_amortized)

class DynamicTable:
  def __init__(self):
    self.size=1
    self.elements=[None]*self.size
    self.num_elements=0
  def insert(self, item):
    if self.num_elements==self.size:
      self.resize(self.size*2)
    self.elements[self.num_elements]=item
    self.num_elements+=1
  def resize(self, new_size):
    new_elements=[None]*new_size
    for i in range(self.num_elements):
      new_elements[i]=self.elements[i]
    self.elements=new_elements
    self.size=new_size
  def accounting_amortized_runtime(self, n):
    total_cost=0
    for i in range(n):
      if self.num_elements==self.size:
        total_cost+=self.size
        self.resize(self.size*2)
      total_cost+=2
      self.num_elements+=1
    return total_cost/n
